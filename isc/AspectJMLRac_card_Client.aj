import card.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.util.Map;


privileged aspect AspectJMLRac_card_Clientcd9b03dc_3cb7_4cb6_8f52_f59c1dce3ba9 {

 declare precedence: AspectJMLRac_*, *;












  /** Generated by AspectJML to check the exceptional public postcondition of
   * method Client. */
  after (final java.lang.String name, final int age, final java.lang.String address, final java.lang.String rg, final java.lang.String cpf, final int pass) throwing (Throwable rac$e) :
     call(card.Client.new( java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int )) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(name, age, address, rg, cpf, pass) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "card.Client.<init>(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"card.Client.java\" by method card.Client.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method card.Client.<init> regarding code at \nFile \"card.Client.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, "card.Client.<init>(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal public postcondition of
   * method getName. */
  after (final card.Client object$rac) returning (final java.lang.String rac$result) :
     (call(java.lang.String card.Client.getName())) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method card.Client.getName regarding code at \nFile \"card.Client.java\", line 42 (card.Client.java:42)";
         evalErrorMsg = "Invalid expression in \"card.Client.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getName()");
       }

     }

  /** Generated by AspectJML to check the exceptional public postcondition of
   * method getName. */
  after (final card.Client object$rac) throwing (Throwable rac$e) :
     (call(java.lang.String card.Client.getName())) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getName()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"card.Client.java\" by method card.Client.getName\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method card.Client.getName regarding code at \nFile \"card.Client.java\", line 42 (card.Client.java:42)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getName()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method setName. */
  after (final card.Client object$rac, final java.lang.String name) throwing (Throwable rac$e) :
     (call(void card.Client.setName(java.lang.String))) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) && args(name) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setName(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"card.Client.java\" by method card.Client.setName\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method card.Client.setName regarding code at \nFile \"card.Client.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setName(java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method getAge. */
  after (final card.Client object$rac) throwing (Throwable rac$e) :
     (call(int card.Client.getAge())) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getAge()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"card.Client.java\" by method card.Client.getAge\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method card.Client.getAge regarding code at \nFile \"card.Client.java\", line 54 (card.Client.java:54)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getAge()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method setAge. */
  after (final card.Client object$rac, final int age) throwing (Throwable rac$e) :
     (call(void card.Client.setAge(int))) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) && args(age) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setAge(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"card.Client.java\" by method card.Client.setAge\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method card.Client.setAge regarding code at \nFile \"card.Client.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setAge(int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal public postcondition of
   * method getAddress. */
  after (final card.Client object$rac) returning (final java.lang.String rac$result) :
     (call(java.lang.String card.Client.getAddress())) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method card.Client.getAddress regarding code at \nFile \"card.Client.java\", line 66 (card.Client.java:66)";
         evalErrorMsg = "Invalid expression in \"card.Client.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getAddress()");
       }

     }

  /** Generated by AspectJML to check the exceptional public postcondition of
   * method getAddress. */
  after (final card.Client object$rac) throwing (Throwable rac$e) :
     (call(java.lang.String card.Client.getAddress())) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getAddress()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"card.Client.java\" by method card.Client.getAddress\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method card.Client.getAddress regarding code at \nFile \"card.Client.java\", line 66 (card.Client.java:66)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getAddress()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method setAddress. */
  after (final card.Client object$rac, final java.lang.String address) throwing (Throwable rac$e) :
     (call(void card.Client.setAddress(java.lang.String))) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) && args(address) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setAddress(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"card.Client.java\" by method card.Client.setAddress\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method card.Client.setAddress regarding code at \nFile \"card.Client.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setAddress(java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal public postcondition of
   * method getRg. */
  after (final card.Client object$rac) returning (final java.lang.String rac$result) :
     (call(java.lang.String card.Client.getRg())) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method card.Client.getRg regarding code at \nFile \"card.Client.java\", line 78 (card.Client.java:78)";
         evalErrorMsg = "Invalid expression in \"card.Client.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getRg()");
       }

     }

  /** Generated by AspectJML to check the exceptional public postcondition of
   * method getRg. */
  after (final card.Client object$rac) throwing (Throwable rac$e) :
     (call(java.lang.String card.Client.getRg())) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getRg()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"card.Client.java\" by method card.Client.getRg\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method card.Client.getRg regarding code at \nFile \"card.Client.java\", line 78 (card.Client.java:78)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getRg()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method setRg. */
  after (final card.Client object$rac, final java.lang.String rg) throwing (Throwable rac$e) :
     (call(void card.Client.setRg(java.lang.String))) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) && args(rg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setRg(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"card.Client.java\" by method card.Client.setRg\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method card.Client.setRg regarding code at \nFile \"card.Client.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setRg(java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal public postcondition of
   * method getCpf. */
  after (final card.Client object$rac) returning (final java.lang.String rac$result) :
     (call(java.lang.String card.Client.getCpf())) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method card.Client.getCpf regarding code at \nFile \"card.Client.java\", line 90 (card.Client.java:90)";
         evalErrorMsg = "Invalid expression in \"card.Client.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCpf()");
       }

     }

  /** Generated by AspectJML to check the exceptional public postcondition of
   * method getCpf. */
  after (final card.Client object$rac) throwing (Throwable rac$e) :
     (call(java.lang.String card.Client.getCpf())) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCpf()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"card.Client.java\" by method card.Client.getCpf\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method card.Client.getCpf regarding code at \nFile \"card.Client.java\", line 90 (card.Client.java:90)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCpf()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method setCpf. */
  after (final card.Client object$rac, final java.lang.String cpf) throwing (Throwable rac$e) :
     (call(void card.Client.setCpf(java.lang.String))) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) && args(cpf) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCpf(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"card.Client.java\" by method card.Client.setCpf\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method card.Client.setCpf regarding code at \nFile \"card.Client.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCpf(java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method getPass. */
  after (final card.Client object$rac) throwing (Throwable rac$e) :
     (call(int card.Client.getPass())) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getPass()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"card.Client.java\" by method card.Client.getPass\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method card.Client.getPass regarding code at \nFile \"card.Client.java\", line 102 (card.Client.java:102)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getPass()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional public postcondition of
   * method setPass. */
  after (final card.Client object$rac, final int pass) throwing (Throwable rac$e) :
     (call(void card.Client.setPass(int))) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && target(object$rac) && args(pass) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPass(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b1 = true;
  			   try{			     
  			     rac$b1 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"card.Client.java\" by method card.Client.setPass\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b1) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b1;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method card.Client.setPass regarding code at \nFile \"card.Client.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setPass(int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static public invariants of 
   * class Client. */
  before (final card.Client object$rac) :
     (call(!static * card.Client+.*(..))) && 
     !@annotation(JMLHelper)&&
     target(object$rac) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) {
         String invErrorMsg = "@pre <File \"Client.java\"> regarding specifications at \nFile \"Client.java\", line 13, character 30 (card.Client.java:13), line 14, character 30 (card.Client.java:14), line 15, character 30 (card.Client.java:15), line 16, character 30 (card.Client.java:16), line 17, character 30 (card.Client.java:17), line 18, character 30 (card.Client.java:18), when \n\tnon_null field 'this.name' is "+object$rac.name+"\n\tnullable field 'this.age' is "+object$rac.age+"\n\tnon_null field 'this.address' is "+object$rac.address+"\n\tnon_null field 'this.rg' is "+object$rac.rg+"\n\tnon_null field 'this.cpf' is "+object$rac.cpf+"\n\tnullable field 'this.pass' is "+object$rac.pass;
         String evalErrorMsg = "Invalid expression in \"@pre <File \"Client.java\"> regarding specifications at \nFile \"Client.java\", line 13, character 30 (card.Client.java:13), line 14, character 30 (card.Client.java:14), line 15, character 30 (card.Client.java:15), line 16, character 30 (card.Client.java:16), line 17, character 30 (card.Client.java:17), line 18, character 30 (card.Client.java:18), when \n\tnon_null field 'this.name' is "+object$rac.name+"\n\tnullable field 'this.age' is "+object$rac.age+"\n\tnon_null field 'this.address' is "+object$rac.address+"\n\tnon_null field 'this.rg' is "+object$rac.rg+"\n\tnon_null field 'this.cpf' is "+object$rac.cpf+"\n\tnullable field 'this.pass' is "+object$rac.pass+"\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = ((object$rac.cpf != null) && ((object$rac.rg != null) && ((object$rac.address != null) && ((object$rac.name != null) && ((((((object$rac.name != "") && (object$rac.age > 0)) && (object$rac.address != "")) && (object$rac.rg != "")) && (object$rac.cpf != "")) && (object$rac.pass > 999))))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, 1);

     }

  /** Generated by AspectJML to check the public precondition of
   * method Client. */
  before (final java.lang.String name, final int age, final java.lang.String address, final java.lang.String rg, final java.lang.String cpf, final int pass) :
     call(card.Client.new( java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int )) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(name, age, address, rg, cpf, pass) {
       String preErrorMsg = "by method card.Client.<init> regarding code at \nFile \"card.Client.java\""+", when \n"+"\t\'name\' is "+name+"\n\t\'address\' is "+address+"\n\t\'rg\' is "+rg+"\n\t\'cpf\' is "+cpf+ ", when \n"+"\t\'name\' is "+name+"\n\t\'address\' is "+address+"\n\t\'rg\' is "+rg+"\n\t\'cpf\' is "+cpf;
       String evalErrorMsg = "Invalid expression in \"card.Client.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((((name != null) && (address != null)) && (rg != null)) && (cpf != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, 1, "card.Client.<init>(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int)");

     }

  /** Generated by AspectJML to check the public precondition of
   * method setName. */
  before (final card.Client object$rac, final java.lang.String name) :
     (call(void card.Client.setName(java.lang.String))) && target(object$rac) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(name) {
       String preErrorMsg = "by method card.Client.setName regarding code at \nFile \"card.Client.java\""+", when \n"+"\t\'name\' is "+name+ ", when \n"+"\t\'name\' is "+name;
       String evalErrorMsg = "Invalid expression in \"card.Client.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (name != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setName(java.lang.String)");

     }

  /** Generated by AspectJML to check the public precondition of
   * method setAddress. */
  before (final card.Client object$rac, final java.lang.String address) :
     (call(void card.Client.setAddress(java.lang.String))) && target(object$rac) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(address) {
       String preErrorMsg = "by method card.Client.setAddress regarding code at \nFile \"card.Client.java\""+", when \n"+"\t\'address\' is "+address+ ", when \n"+"\t\'address\' is "+address;
       String evalErrorMsg = "Invalid expression in \"card.Client.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (address != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setAddress(java.lang.String)");

     }

  /** Generated by AspectJML to check the public precondition of
   * method setRg. */
  before (final card.Client object$rac, final java.lang.String rg) :
     (call(void card.Client.setRg(java.lang.String))) && target(object$rac) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(rg) {
       String preErrorMsg = "by method card.Client.setRg regarding code at \nFile \"card.Client.java\""+", when \n"+"\t\'rg\' is "+rg+ ", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"card.Client.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (rg != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setRg(java.lang.String)");

     }

  /** Generated by AspectJML to check the public precondition of
   * method setCpf. */
  before (final card.Client object$rac, final java.lang.String cpf) :
     (call(void card.Client.setCpf(java.lang.String))) && target(object$rac) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) && args(cpf) {
       String preErrorMsg = "by method card.Client.setCpf regarding code at \nFile \"card.Client.java\""+", when \n"+"\t\'cpf\' is "+cpf+ ", when \n"+"\t\'cpf\' is "+cpf;
       String evalErrorMsg = "Invalid expression in \"card.Client.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (cpf != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, 1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCpf(java.lang.String)");

     }


  /** Generated by AspectJML to check non-static public invariants of 
   * class Client. */
  after (final card.Client object$rac) :
     (call(!static * card.Client+.*(..)) || 
       call(card.Client+.new(..))) && 
     !call(void card.Client.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     target(object$rac) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"Client.java\"> regarding specifications at \nFile \"Client.java\", line 13, character 30 (card.Client.java:13), line 14, character 30 (card.Client.java:14), line 15, character 30 (card.Client.java:15), line 16, character 30 (card.Client.java:16), line 17, character 30 (card.Client.java:17), line 18, character 30 (card.Client.java:18), when \n\tnon_null field 'this.name' is "+object$rac.name+"\n\tnullable field 'this.age' is "+object$rac.age+"\n\tnon_null field 'this.address' is "+object$rac.address+"\n\tnon_null field 'this.rg' is "+object$rac.rg+"\n\tnon_null field 'this.cpf' is "+object$rac.cpf+"\n\tnullable field 'this.pass' is "+object$rac.pass;
         String evalErrorMsg = "Invalid expression in \"@post <File \"Client.java\"> regarding specifications at \nFile \"Client.java\", line 13, character 30 (card.Client.java:13), line 14, character 30 (card.Client.java:14), line 15, character 30 (card.Client.java:15), line 16, character 30 (card.Client.java:16), line 17, character 30 (card.Client.java:17), line 18, character 30 (card.Client.java:18), when \n\tnon_null field 'this.name' is "+object$rac.name+"\n\tnullable field 'this.age' is "+object$rac.age+"\n\tnon_null field 'this.address' is "+object$rac.address+"\n\tnon_null field 'this.rg' is "+object$rac.rg+"\n\tnon_null field 'this.cpf' is "+object$rac.cpf+"\n\tnullable field 'this.pass' is "+object$rac.pass+"\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = ((object$rac.cpf != null) && ((object$rac.rg != null) && ((object$rac.address != null) && ((object$rac.name != null) && ((((((object$rac.name != "") && (object$rac.age > 0)) && (object$rac.address != "")) && (object$rac.rg != "")) && (object$rac.cpf != "")) && (object$rac.pass > 999))))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, 1);

       }
     }
  after () returning (final card.Client object$rac) :   call(card.Client+.new(..)) && 
     !@annotation(JMLHelper) &&    !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"Client.java\"> regarding specifications at \nFile \"Client.java\", line 13, character 30 (card.Client.java:13), line 14, character 30 (card.Client.java:14), line 15, character 30 (card.Client.java:15), line 16, character 30 (card.Client.java:16), line 17, character 30 (card.Client.java:17), line 18, character 30 (card.Client.java:18), when \n\tnon_null field 'this.name' is "+object$rac.name+"\n\tnullable field 'this.age' is "+object$rac.age+"\n\tnon_null field 'this.address' is "+object$rac.address+"\n\tnon_null field 'this.rg' is "+object$rac.rg+"\n\tnon_null field 'this.cpf' is "+object$rac.cpf+"\n\tnullable field 'this.pass' is "+object$rac.pass;
         String evalErrorMsg = "Invalid expression in \"@post <File \"Client.java\"> regarding specifications at \nFile \"Client.java\", line 13, character 30 (card.Client.java:13), line 14, character 30 (card.Client.java:14), line 15, character 30 (card.Client.java:15), line 16, character 30 (card.Client.java:16), line 17, character 30 (card.Client.java:17), line 18, character 30 (card.Client.java:18), when \n\tnon_null field 'this.name' is "+object$rac.name+"\n\tnullable field 'this.age' is "+object$rac.age+"\n\tnon_null field 'this.address' is "+object$rac.address+"\n\tnon_null field 'this.rg' is "+object$rac.rg+"\n\tnon_null field 'this.cpf' is "+object$rac.cpf+"\n\tnullable field 'this.pass' is "+object$rac.pass+"\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = ((object$rac.cpf != null) && ((object$rac.rg != null) && ((object$rac.address != null) && ((object$rac.name != null) && ((((((object$rac.name != "") && (object$rac.age > 0)) && (object$rac.address != "")) && (object$rac.rg != "")) && (object$rac.cpf != "")) && (object$rac.pass > 999))))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, 1);

       }
     }


  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final card.Client object$rac): (call( * card.Client..*+.*(..))
            || call(card.Client..*+.new(..))
            || call( * card.Client+.*(..))
            || call(card.Client+.new(..))) && 
     target(object$rac) && 
     !within(*..AspectJMLRac_*) && !within(AspectJMLRac_*) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (CAC enabled) */
    after() throwing (Throwable rac$e): (call( * card.Client..*+.*(..))
            || call(card.Client..*+.new(..))
            || call( * card.Client+.*(..))
            || call(card.Client+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Client{
    before(): (call( * card.Client..*+.*(..))
            || call(card.Client..*+.new(..))
            || call( * card.Client+.*(..))
            || call(card.Client+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
